// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Question /> renders the component 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <Question
    question={
      Object {
        "author": "rfghhj",
        "body": "ggggggg",
        "topic": "User with this name or author not found !",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "question": Object {
        "author": "rfghhj",
        "body": "ggggggg",
        "topic": "User with this name or author not found !",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": <blockquote
        id="blockQ"
      >
        <p
          class="text-black"
        >
          <strong>
            Topic: 
          </strong>
          User with this name or author not found !
        </p>
        <p
          id="text-body1"
        >
          ggggggg
        </p>
        <small
          class="text-black"
        >
          <strong>
            Author: 
          </strong>
          rfghhj
        </small>
      </blockquote>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p
            className="text-black"
          >
            <strong>
              Topic: 
            </strong>
            User with this name or author not found !
          </p>,
          <p
            id="text-body1"
          >
            ggggggg
          </p>,
          <small
            className="text-black"
          >
            <strong>
              Author: 
            </strong>
            rfghhj
          </small>,
        ],
        "id": "blockQ",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <p
            class="text-black"
          >
            <strong>
              Topic: 
            </strong>
            User with this name or author not found !
          </p>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <strong>
                Topic: 
              </strong>,
              "User with this name or author not found !",
            ],
            "className": "text-black",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <strong>
                Topic: 
              </strong>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Topic: ",
              },
              "ref": null,
              "rendered": Array [
                "Topic: ",
              ],
              "type": "strong",
            },
            "User with this name or author not found !",
          ],
          "type": "p",
        },
        Object {
          "instance": <p
            id="text-body1"
          >
            ggggggg
          </p>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "ggggggg",
            "id": "text-body1",
          },
          "ref": null,
          "rendered": Array [
            "ggggggg",
          ],
          "type": "p",
        },
        Object {
          "instance": <small
            class="text-black"
          >
            <strong>
              Author: 
            </strong>
            rfghhj
          </small>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <strong>
                Author: 
              </strong>,
              "rfghhj",
            ],
            "className": "text-black",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <strong>
                Author: 
              </strong>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Author: ",
              },
              "ref": null,
              "rendered": Array [
                "Author: ",
              ],
              "type": "strong",
            },
            "rfghhj",
          ],
          "type": "small",
        },
      ],
      "type": "blockquote",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "question": Object {
          "author": "rfghhj",
          "body": "ggggggg",
          "topic": "User with this name or author not found !",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": <blockquote
          id="blockQ"
        >
          <p
            class="text-black"
          >
            <strong>
              Topic: 
            </strong>
            User with this name or author not found !
          </p>
          <p
            id="text-body1"
          >
            ggggggg
          </p>
          <small
            class="text-black"
          >
            <strong>
              Author: 
            </strong>
            rfghhj
          </small>
        </blockquote>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="text-black"
            >
              <strong>
                Topic: 
              </strong>
              User with this name or author not found !
            </p>,
            <p
              id="text-body1"
            >
              ggggggg
            </p>,
            <small
              className="text-black"
            >
              <strong>
                Author: 
              </strong>
              rfghhj
            </small>,
          ],
          "id": "blockQ",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <p
              class="text-black"
            >
              <strong>
                Topic: 
              </strong>
              User with this name or author not found !
            </p>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <strong>
                  Topic: 
                </strong>,
                "User with this name or author not found !",
              ],
              "className": "text-black",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <strong>
                  Topic: 
                </strong>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Topic: ",
                },
                "ref": null,
                "rendered": Array [
                  "Topic: ",
                ],
                "type": "strong",
              },
              "User with this name or author not found !",
            ],
            "type": "p",
          },
          Object {
            "instance": <p
              id="text-body1"
            >
              ggggggg
            </p>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "ggggggg",
              "id": "text-body1",
            },
            "ref": null,
            "rendered": Array [
              "ggggggg",
            ],
            "type": "p",
          },
          Object {
            "instance": <small
              class="text-black"
            >
              <strong>
                Author: 
              </strong>
              rfghhj
            </small>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <strong>
                  Author: 
                </strong>,
                "rfghhj",
              ],
              "className": "text-black",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <strong>
                  Author: 
                </strong>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Author: ",
                },
                "ref": null,
                "rendered": Array [
                  "Author: ",
                ],
                "type": "strong",
              },
              "rfghhj",
            ],
            "type": "small",
          },
        ],
        "type": "blockquote",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<ShowQuestion /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(ShowQuestion) />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Connect(ShowQuestion) />,
      "value": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeState": Object {
          "getQuestions": [MockFunction],
          "question": Object {
            "author": "hcxhffd",
            "body": "fsdsds",
            "topic": "hfbcn",
          },
          "questionReducer": Object {
            "question": Object {
              "author": "hcxhffd",
              "body": "fsdsds",
              "topic": "hfbcn",
            },
          },
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": null,
        "_currentValue2": null,
        "_threadCount": 0,
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Connect(ShowQuestion) />,
        "value": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeState": Object {
            "getQuestions": [MockFunction],
            "question": Object {
              "author": "hcxhffd",
              "body": "fsdsds",
              "topic": "hfbcn",
            },
            "questionReducer": Object {
              "question": Object {
                "author": "hcxhffd",
                "body": "fsdsds",
                "topic": "hfbcn",
              },
            },
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": null,
          "_currentValue2": null,
          "_threadCount": 0,
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
